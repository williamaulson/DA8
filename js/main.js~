window.onload = function() {
    // You might want to start with a template that uses GameStates:
    //     https://github.com/photonstorm/phaser/tree/master/resources/Project%20Templates/Basic
    
    // You can copy-and-paste the code from any of the examples at http://examples.phaser.io here.
    // You will need to change the fourth parameter to "new Phaser.Game()" from
    // 'phaser-example' to 'game', which is the id of the HTML element where we
    // want the game to go.
    // The assets (and code) can be found at: https://github.com/photonstorm/phaser/tree/master/examples/assets
    // You will need to change the paths you pass to "game.load.image()" or any other
    // loading functions to reflect where you are putting the assets.
    // All loading functions will typically all be found inside "preload()".
    
    "use strict";
    
    var game = new Phaser.Game(1024, 576, Phaser.AUTO, 'game', { preload: preload, create: create, update: update } );
    
    function preload()
    {
    	    game.load.image('back', 'assets/back.png')
    	    game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
    	    game.load.image('floor', 'assets/floor.png')
    	    game.load.image('wall', 'assets/wall.png')
    }
    
    var avatar;
    var cursors;
    var avatarDirect = 1;
    var wSouth;
    var wNorth;
    var wWest;
    var wEast;
    var wallGroup;
    
    function create()
    {
    	    game.physics.startSystem(Phaser.Physics.ARCADE);
    	    game.world.setBounds(0, 0, 1024, 576);
    	    game.add.sprite(0, 0, 'back');
    	    
    	    wallGroup = game.add.group();
    	    game.physics.arcade.enable(wallGroup);
    	    
    	    wSouth = game.add.sprite(0, 551, 'floor');
    	    game.physics.arcade.enable(wSouth);
    	    wSouth.body.immovable = true;
    	    wallGroup.add(wSouth);
    	    wNorth = game.add.sprite(0, 0, 'floor');
    	    game.physics.arcade.enable(wNorth);
    	    wNorth.body.immovable = true;
    	    wallGroup.add(wNorth);
    	    wWest = game.add.sprite(0, 0, 'wall');
    	    game.physics.arcade.enable(wWest);
    	    wWest.body.immovable = true;
    	    wallGroup.add(wWest);
    	    wEast = game.add.sprite(999, 0, 'wall');
    	    game.physics.arcade.enable(wEast);
    	    wEast.body.immovable = true;
    	    wallGroup.add(wEast);
    	    
    	    avatar = game.add.sprite(950, 480, 'dude');
    	    game.physics.arcade.enable(avatar);
    	    avatar.animations.add('left', [0, 1, 2, 3], 10, true);
    	    avatar.animations.add('right', [5, 6, 7, 8], 10, true);
    	    
    	    cursors = game.input.keyboard.createCursorKeys();
    	    
    	    game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
    	    game.input.onDown.add(fullScreenStart, this);
    	    game.paused = true;
    }
    
    function fullScreenStart()
    {
    	    if (game.scale.isFullScreen)
    	    {
    	    	    game.paused = true;
    	    	    game.scale.stopFullScreen();
    	    }
    	    else
    	    {
    	    	    game.scale.startFullScreen(true);
    	    	    game.paused = false;
    	    }
    }
    
    function update()
    {
    	    avatar.body.velocity.x = 0;
    	    avatar.body.velocity.y = 0;
    	    if (cursors.up.isDown && cursors.right.isDown)
    	    {
    	    	    avatar.body.velocity.y = -200;
    	    	    avatar.body.velocity.x = 200;
    	    	    avatar.animations.play('right');
    	    	    avatarDirect = 0;
    	    }
    	    else if (cursors.up.isDown && cursors.left.isDown)
    	    {
    	    	    avatar.body.velocity.y = -200;
    	    	    avatar.body.velocity.x = -200;
    	    	    avatar.animations.play('left');
    	    	    avatarDirect = 1;
    	    }
    	    else if (cursors.down.isDown && cursors.right.isDown)
    	    {
    	    	    avatar.body.velocity.y = 200;
    	    	    avatar.body.velocity.x = 200;
    	    	    avatar.animations.play('right');
    	    	    avatarDirect = 0;
    	    }
    	    else if (cursors.left.isDown && cursors.down.isDown)
    	    {
    	    	    avatar.body.velocity.y = 200;
    	    	    avatar.body.velocity.x = -200;
    	    	    avatar.animations.play('left');
    	    	    avatarDirect = 1;
    	    }
    	    else if (cursors.up.isDown)
    	    {
    	    	    avatar.body.velocity.y = -200;
    	    	    if (avatarDirect)
    	    	    {
    	    	    	  avatar.animations.play('left');
    	    	    }
    	    	    else
    	    	    {
    	    	    	   avatar.animations.play('right');
    	    	    }
    	    }
    	    else if (cursors.down.isDown)
    	    {
    	    	    avatar.body.velocity.y = 200;
    	    	    if (avatarDirect)
    	    	    {
    	    	    	  avatar.animations.play('left');
    	    	    }
    	    	    else
    	    	    {
    	    	    	   avatar.animations.play('right');
    	    	    }
    	    }
    	    else if (cursors.left.isDown)
    	    {
    	    	    avatar.body.velocity.x = -200;
    	    	    avatar.animations.play('left');
    	    	    avatarDirect = 1;
    	    }
    	    else if (cursors.right.isDown)
    	    {
    	    	    avatar.body.velocity.x = 200;
    	    	    avatar.animations.play('right');
    	    	    avatarDirect = 0;
    	    }
    	    else
    	    {
    	    	    if (avatarDirect)
    	    	    {
    	    	    	  avatar.frame = 0;
    	    	    }
    	    	    else
    	    	    {
    	    	    	   avatar.frame = 5;
    	    	    }
    	    }
    }
  
};
